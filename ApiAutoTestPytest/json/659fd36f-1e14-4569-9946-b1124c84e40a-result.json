{"name": "test_erJi[getData3]", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <test_erJi.TestErJi object at 0x00000238C9A316C8>\ngetData = {'data': {'csid': '1', 'page': ''}, 'headers': None, 'json': None, 'method': 'POST', ...}\n\n    @allure.story('二级分页接口')\n    def test_erJi(self,getData):\n        # 发送请求\n        result = ru.doRequest(method=getData['method'],url=getData['url'],params=getData['params'],data=getData['data'],json=getData['json'],headers=getData['headers'])\n    \n>       ru.assertResult(result,getData['validate']['statusCode'],getData['validate']['errorCode'],getData['validate']['msg'])\n\n..\\testcases\\test_erJi.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <util.requestUtil.RequestUtil object at 0x00000238C8EA0C48>\nresult = <Response [400]>, statusCode = '200', errorCode = '400'\nmsg = 'page为必填'\n\n    def assertResult(self, result, statusCode, errorCode, msg):\n        with allure.step('发送请求'):\n            allure.attach(str(result.request.url),'请求路径')\n            allure.attach(str(result.request.method),'请求方式')\n            allure.attach(str(result.request.headers),'请求头')\n            allure.attach(str(result.request.body),'请求体')\n    \n        with allure.step('获取响应'):\n            allure.attach(str(result.status_code),'响应状态码')\n            allure.attach(str(result.headers),'响应头')\n            allure.attach(str(result.text),'响应文本内容')\n    \n        with allure.step('断言'):\n            allure.attach(str(statusCode),'预期响应状态码')\n            allure.attach(str(errorCode),'预期返回错误码')\n            allure.attach(str(msg),'预期返回错误信息')\n    \n>           assert result.status_code == int(statusCode)\nE           AssertionError\n\n..\\util\\requestUtil.py:60: AssertionError"}, "steps": [{"name": "发送请求", "status": "passed", "attachments": [{"name": "请求路径", "source": "edd2b594-9a73-4019-a6fe-776b4acfa398-attachment.attach"}, {"name": "请求方式", "source": "ff1349aa-1a56-4bf8-a0d6-e54c0b4374e0-attachment.attach"}, {"name": "请求头", "source": "c6e2617a-39f5-4b0e-b892-d82618e7c954-attachment.attach"}, {"name": "请求体", "source": "230a1759-c885-4113-8fc8-f718c10a38f3-attachment.attach"}], "start": 1610087535740, "stop": 1610087535743}, {"name": "获取响应", "status": "passed", "attachments": [{"name": "响应状态码", "source": "a935866a-e1ce-4b6f-8a1b-f15eaafaa698-attachment.attach"}, {"name": "响应头", "source": "034c0469-f638-49f8-be26-3675ddb81957-attachment.attach"}, {"name": "响应文本内容", "source": "3a6de030-e865-4fae-86fe-0350d48d6c2a-attachment.attach"}], "start": 1610087535743, "stop": 1610087535746}, {"name": "断言", "status": "failed", "statusDetails": {"message": "AssertionError\n", "trace": "  File \"D:\\PycharmProjects\\ApiAutoTestPytest\\util\\requestUtil.py\", line 60, in assertResult\n    assert result.status_code == int(statusCode)\n"}, "attachments": [{"name": "预期响应状态码", "source": "14089e0d-e35a-4db6-ae86-ce7fa67920c2-attachment.attach"}, {"name": "预期返回错误码", "source": "bbac3023-630e-412d-a732-6b3f072194bf-attachment.attach"}, {"name": "预期返回错误信息", "source": "b96867eb-0b96-444f-a020-773de7c9e7e6-attachment.attach"}], "start": 1610087535746, "stop": 1610087535749}], "parameters": [{"name": "getData", "value": "{'name': 'erJi', 'method': 'POST', 'url': 'http://192.168.1.165:8081/shop/mfindByPageCsid', 'headers': None, 'params': None, 'data': {'csid': '1', 'page': ''}, 'json': None, 'validate': {'statusCode': '200', 'errorCode': '400', 'msg': 'page为必填'}}"}], "start": 1610087535730, "stop": 1610087535749, "uuid": "5d004c3c-928b-4436-bada-c1b82c4c74af", "historyId": "c6cf90ffed342839c500c67ba0d4404e", "testCaseId": "64a1b3a2a3d04e960280604741456f7b", "fullName": "testcases.test_erJi.TestErJi#test_erJi", "labels": [{"name": "feature", "value": "商品信息"}, {"name": "story", "value": "二级分页接口"}, {"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_erJi"}, {"name": "subSuite", "value": "TestErJi"}, {"name": "host", "value": "DESKTOP-HLLR26H"}, {"name": "thread", "value": "17912-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_erJi"}]}
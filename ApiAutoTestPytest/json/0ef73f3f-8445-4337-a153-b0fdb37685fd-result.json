{"name": "test_erJi[getData4]", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <test_erJi.TestErJi object at 0x00000203EEF18EC8>\ngetData = {'data': {'csid': 'a', 'page': 'y'}, 'headers': None, 'json': None, 'method': 'POST', ...}\n\n    @allure.story('二级分页接口')\n    def test_erJi(self,getData):\n        # 发送请求\n        result = ru.doRequest(method=getData['method'],url=getData['url'],params=getData['params'],data=getData['data'],json=getData['json'],headers=getData['headers'])\n    \n>       ru.assertResult(result,getData['validate']['statusCode'],getData['validate']['errorCode'],getData['validate']['msg'])\n\n..\\testcases\\test_erJi.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <util.requestUtil.RequestUtil object at 0x00000203EEE7E608>\nresult = <Response [400]>, statusCode = '200', errorCode = '400', msg = '参数类型错误'\n\n    def assertResult(self, result, statusCode, errorCode, msg):\n        with allure.step('发送请求'):\n            allure.attach(str(result.request.url),'请求路径')\n            allure.attach(str(result.request.method),'请求方式')\n            allure.attach(str(result.request.headers),'请求头')\n            allure.attach(str(result.request.body),'请求体')\n    \n        with allure.step('获取响应'):\n            allure.attach(str(result.status_code),'响应状态码')\n            allure.attach(str(result.headers),'响应头')\n            allure.attach(str(result.text),'响应文本内容')\n    \n        with allure.step('断言'):\n            allure.attach(str(statusCode),'预期响应状态码')\n            allure.attach(str(errorCode),'预期返回错误码')\n            allure.attach(str(msg),'预期返回错误信息')\n    \n>           assert result.status_code == int(statusCode)\nE           AssertionError\n\n..\\util\\requestUtil.py:60: AssertionError"}, "steps": [{"name": "发送请求", "status": "passed", "attachments": [{"name": "请求路径", "source": "ddb09b04-3883-449e-955d-ab81759c6ff8-attachment.attach"}, {"name": "请求方式", "source": "6fc65902-b5b1-4e8e-9c91-1bbc9b9de623-attachment.attach"}, {"name": "请求头", "source": "5f237e72-1d6c-4d3a-95e5-146aada536fd-attachment.attach"}, {"name": "请求体", "source": "cbff3ab6-c971-43c6-af9d-61b9965273f7-attachment.attach"}], "start": 1610270300851, "stop": 1610270300854}, {"name": "获取响应", "status": "passed", "attachments": [{"name": "响应状态码", "source": "d1c4f53c-4af7-4a9d-b9c8-15713dc1c08b-attachment.attach"}, {"name": "响应头", "source": "19fbf866-3a8f-4225-8328-7173594aaa6b-attachment.attach"}, {"name": "响应文本内容", "source": "2ddb8f90-9ab3-4589-9f9e-7565b4541f59-attachment.attach"}], "start": 1610270300854, "stop": 1610270300856}, {"name": "断言", "status": "failed", "statusDetails": {"message": "AssertionError\n", "trace": "  File \"D:\\PycharmProjects\\ApiAutoTestPytest\\util\\requestUtil.py\", line 60, in assertResult\n    assert result.status_code == int(statusCode)\n"}, "attachments": [{"name": "预期响应状态码", "source": "0c5b2142-7afc-4d6b-85af-4d48aa3bd588-attachment.attach"}, {"name": "预期返回错误码", "source": "e3f8ef78-39b3-4d99-9ecd-2dced8c44e5e-attachment.attach"}, {"name": "预期返回错误信息", "source": "ff53a4e1-4e69-4fd5-be9b-a4752f4253ed-attachment.attach"}], "start": 1610270300856, "stop": 1610270300858}], "parameters": [{"name": "getData", "value": "{'name': 'erJi', 'method': 'POST', 'url': 'http://192.168.1.165:8081/shop/mfindByPageCsid', 'headers': None, 'params': None, 'data': {'csid': 'a', 'page': 'y'}, 'json': None, 'validate': {'statusCode': '200', 'errorCode': '400', 'msg': '参数类型错误'}}"}], "start": 1610270300841, "stop": 1610270300858, "uuid": "3d58ed28-e536-432b-9a96-70775b36756a", "historyId": "5be90402c160aeaca01c71c14980a6f3", "testCaseId": "64a1b3a2a3d04e960280604741456f7b", "fullName": "testcases.test_erJi.TestErJi#test_erJi", "labels": [{"name": "feature", "value": "商品信息"}, {"name": "story", "value": "二级分页接口"}, {"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_erJi"}, {"name": "subSuite", "value": "TestErJi"}, {"name": "host", "value": "DESKTOP-HLLR26H"}, {"name": "thread", "value": "59016-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_erJi"}]}
{"name": "test_erJi[getData4]", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <test_erJi.TestErJi object at 0x000002B063B3B3C8>\ngetData = {'data': {'csid': 'a', 'page': 'y'}, 'headers': None, 'json': None, 'method': 'POST', ...}\n\n    @allure.story('二级分页接口')\n    def test_erJi(self,getData):\n        # 发送请求\n        result = ru.doRequest(method=getData['method'],url=getData['url'],params=getData['params'],data=getData['data'],json=getData['json'],headers=getData['headers'])\n    \n>       ru.assertResult(result,getData['validate']['statusCode'],getData['validate']['errorCode'],getData['validate']['msg'])\n\n..\\testcases\\test_erJi.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <util.requestUtil.RequestUtil object at 0x000002B062EF5208>\nresult = <Response [400]>, statusCode = '200', errorCode = '400', msg = '参数类型错误'\n\n    def assertResult(self, result, statusCode, errorCode, msg):\n        with allure.step('发送请求'):\n            allure.attach(str(result.request.url),'请求路径')\n            allure.attach(str(result.request.method),'请求方式')\n            allure.attach(str(result.request.headers),'请求头')\n            allure.attach(str(result.request.body),'请求体')\n    \n        with allure.step('获取响应'):\n            allure.attach(str(result.status_code),'响应状态码')\n            allure.attach(str(result.headers),'响应头')\n            allure.attach(str(result.text),'响应文本内容')\n    \n        with allure.step('断言'):\n            allure.attach(str(statusCode),'预期响应状态码')\n            allure.attach(str(errorCode),'预期返回错误码')\n            allure.attach(str(msg),'预期返回错误信息')\n    \n>           assert result.status_code == int(statusCode)\nE           AssertionError\n\n..\\util\\requestUtil.py:60: AssertionError"}, "steps": [{"name": "发送请求", "status": "passed", "attachments": [{"name": "请求路径", "source": "46d216c7-e526-472e-9acd-b6e2951c967c-attachment.attach"}, {"name": "请求方式", "source": "6a11c96f-eb9c-4721-95b7-08315fa2d28a-attachment.attach"}, {"name": "请求头", "source": "f591fcc7-165a-4f5c-a6b9-d9f1b4a3d824-attachment.attach"}, {"name": "请求体", "source": "877d910d-8c4a-44b9-ac01-3adaa9e480bc-attachment.attach"}], "start": 1610077695540, "stop": 1610077695543}, {"name": "获取响应", "status": "passed", "attachments": [{"name": "响应状态码", "source": "40705392-e365-40ee-bbed-9293af2772dd-attachment.attach"}, {"name": "响应头", "source": "0ce643d5-cb90-4023-bd89-789218934ee3-attachment.attach"}, {"name": "响应文本内容", "source": "fba7d306-b8b0-48da-bac2-4ddfe9048f73-attachment.attach"}], "start": 1610077695543, "stop": 1610077695545}, {"name": "断言", "status": "failed", "statusDetails": {"message": "AssertionError\n", "trace": "  File \"D:\\PycharmProjects\\ApiAutoTestPytest\\util\\requestUtil.py\", line 60, in assertResult\n    assert result.status_code == int(statusCode)\n"}, "attachments": [{"name": "预期响应状态码", "source": "76ce265d-ddca-4030-b527-4053e0ffc728-attachment.attach"}, {"name": "预期返回错误码", "source": "8d688f69-c2e4-49ab-b7f0-c4b1f92f887b-attachment.attach"}, {"name": "预期返回错误信息", "source": "7e2b2a2f-dfd0-4c57-bd43-8bb3596f7496-attachment.attach"}], "start": 1610077695545, "stop": 1610077695547}], "parameters": [{"name": "getData", "value": "{'name': 'erJi', 'method': 'POST', 'url': 'http://192.168.1.165:8081/shop/mfindByPageCsid', 'headers': None, 'params': None, 'data': {'csid': 'a', 'page': 'y'}, 'json': None, 'validate': {'statusCode': '200', 'errorCode': '400', 'msg': '参数类型错误'}}"}], "start": 1610077695530, "stop": 1610077695548, "uuid": "895e6f4e-bd60-4f78-b56f-e8921a3963d5", "historyId": "5be90402c160aeaca01c71c14980a6f3", "testCaseId": "64a1b3a2a3d04e960280604741456f7b", "fullName": "testcases.test_erJi.TestErJi#test_erJi", "labels": [{"name": "story", "value": "二级分页接口"}, {"name": "feature", "value": "商品信息"}, {"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_erJi"}, {"name": "subSuite", "value": "TestErJi"}, {"name": "host", "value": "DESKTOP-HLLR26H"}, {"name": "thread", "value": "28724-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_erJi"}]}
{"name": "test_erJi[getData3]", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <test_erJi.TestErJi object at 0x0000025F7B897948>\ngetData = {'data': {'csid': '1', 'page': ''}, 'headers': None, 'json': None, 'method': 'POST', ...}\n\n    @allure.story('二级分页接口')\n    def test_erJi(self,getData):\n        # 发送请求\n        result = ru.doRequest(method=getData['method'],url=getData['url'],params=getData['params'],data=getData['data'],json=getData['json'],headers=getData['headers'])\n    \n>       ru.assertResult(result,getData['validate']['statusCode'],getData['validate']['errorCode'],getData['validate']['msg'])\n\n..\\testcases\\test_erJi.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <util.requestUtil.RequestUtil object at 0x0000025F7C5C7788>\nresult = <Response [400]>, statusCode = '200', errorCode = '400'\nmsg = 'page为必填'\n\n    def assertResult(self, result, statusCode, errorCode, msg):\n        with allure.step('发送请求'):\n            allure.attach(str(result.request.url),'请求路径')\n            allure.attach(str(result.request.method),'请求方式')\n            allure.attach(str(result.request.headers),'请求头')\n            allure.attach(str(result.request.body),'请求体')\n    \n        with allure.step('获取响应'):\n            allure.attach(str(result.status_code),'响应状态码')\n            allure.attach(str(result.headers),'响应头')\n            allure.attach(str(result.text),'响应文本内容')\n    \n        with allure.step('断言'):\n            allure.attach(str(statusCode),'预期响应状态码')\n            allure.attach(str(errorCode),'预期返回错误码')\n            allure.attach(str(msg),'预期返回错误信息')\n    \n>           assert result.status_code == int(statusCode)\nE           AssertionError\n\n..\\util\\requestUtil.py:60: AssertionError"}, "steps": [{"name": "发送请求", "status": "passed", "attachments": [{"name": "请求路径", "source": "e0fff661-7325-4c1e-b5b8-aa89cdd6f028-attachment.attach"}, {"name": "请求方式", "source": "4c8e682e-a92d-4ff4-b96a-7b9a191c2172-attachment.attach"}, {"name": "请求头", "source": "d5a522d1-c5cb-41c7-b8bc-df9d6cc82c82-attachment.attach"}, {"name": "请求体", "source": "6a934172-990e-4bdb-9cc3-b9f4ea591a79-attachment.attach"}], "start": 1610270197531, "stop": 1610270197533}, {"name": "获取响应", "status": "passed", "attachments": [{"name": "响应状态码", "source": "fc61985e-bec6-4d4d-af6b-473a223cd248-attachment.attach"}, {"name": "响应头", "source": "3219e52a-dfe8-45bc-9693-cdfae49d8cf1-attachment.attach"}, {"name": "响应文本内容", "source": "18cd0ae5-eeb5-4423-9ac3-4fb32f018f41-attachment.attach"}], "start": 1610270197533, "stop": 1610270197535}, {"name": "断言", "status": "failed", "statusDetails": {"message": "AssertionError\n", "trace": "  File \"D:\\PycharmProjects\\ApiAutoTestPytest\\util\\requestUtil.py\", line 60, in assertResult\n    assert result.status_code == int(statusCode)\n"}, "attachments": [{"name": "预期响应状态码", "source": "316e9802-e04c-4ddd-ae28-353e535debcb-attachment.attach"}, {"name": "预期返回错误码", "source": "7a13a491-98bd-41ac-a78e-dcd5f3e5df7c-attachment.attach"}, {"name": "预期返回错误信息", "source": "6e25fc51-f5d3-42ac-b42b-f27168257025-attachment.attach"}], "start": 1610270197535, "stop": 1610270197537}], "parameters": [{"name": "getData", "value": "{'name': 'erJi', 'method': 'POST', 'url': 'http://192.168.1.165:8081/shop/mfindByPageCsid', 'headers': None, 'params': None, 'data': {'csid': '1', 'page': ''}, 'json': None, 'validate': {'statusCode': '200', 'errorCode': '400', 'msg': 'page为必填'}}"}], "start": 1610270197520, "stop": 1610270197537, "uuid": "0146c6da-6984-4bf3-a70e-1d7d64d2448c", "historyId": "c6cf90ffed342839c500c67ba0d4404e", "testCaseId": "64a1b3a2a3d04e960280604741456f7b", "fullName": "testcases.test_erJi.TestErJi#test_erJi", "labels": [{"name": "feature", "value": "商品信息"}, {"name": "story", "value": "二级分页接口"}, {"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_erJi"}, {"name": "subSuite", "value": "TestErJi"}, {"name": "host", "value": "DESKTOP-HLLR26H"}, {"name": "thread", "value": "58156-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_erJi"}]}
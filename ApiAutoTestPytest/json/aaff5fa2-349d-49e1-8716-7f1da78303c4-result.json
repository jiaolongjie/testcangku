{"name": "test_erJi[getData3]", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <test_erJi.TestErJi object at 0x000002AC88F389C8>\ngetData = {'data': None, 'headers': None, 'json': None, 'method': 'GET', ...}\n\n    @allure.story('二级分页接口')\n    def test_erJi(self,getData):\n        # 发送请求\n        result = ru.doRequest(method=getData['method'],url=getData['url'],params=getData['params'],data=getData['data'],json=getData['json'],headers=getData['headers'])\n    \n>       ru.assertResult(result,getData['validate']['statusCode'],getData['validate']['errorCode'],getData['validate']['msg'])\n\n..\\testcases\\test_erJi.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <util.requestUtil.RequestUtil object at 0x000002AC88303408>\nresult = <Response [400]>, statusCode = '200', errorCode = '400'\nmsg = 'page为必填'\n\n    def assertResult(self, result, statusCode, errorCode, msg):\n        with allure.step('发送请求'):\n            allure.attach(str(result.request.url),'请求路径')\n            allure.attach(str(result.request.method),'请求方式')\n            allure.attach(str(result.request.headers),'请求头')\n            allure.attach(str(result.request.body),'请求体')\n    \n        with allure.step('获取响应'):\n            allure.attach(str(result.status_code),'响应状态码')\n            allure.attach(str(result.headers),'响应头')\n            allure.attach(str(result.text),'响应文本内容')\n    \n        with allure.step('断言'):\n            allure.attach(str(statusCode),'预期响应状态码')\n            allure.attach(str(errorCode),'预期返回错误码')\n            allure.attach(str(msg),'预期返回错误信息')\n    \n>           assert result.status_code == int(statusCode)\nE           AssertionError\n\n..\\util\\requestUtil.py:60: AssertionError"}, "steps": [{"name": "发送请求", "status": "passed", "attachments": [{"name": "请求路径", "source": "8b8e0941-5067-4fe1-939c-ec5792c31a01-attachment.attach"}, {"name": "请求方式", "source": "88427d57-0ea2-4924-9063-686a6689346b-attachment.attach"}, {"name": "请求头", "source": "e4037d29-4d68-4d28-b7dd-1762d47b4ae1-attachment.attach"}, {"name": "请求体", "source": "8b38e8a0-10d0-44b5-99e6-64fdbee2a0d9-attachment.attach"}], "start": 1610078870682, "stop": 1610078870686}, {"name": "获取响应", "status": "passed", "attachments": [{"name": "响应状态码", "source": "840a40c7-d0f3-43c7-afa9-eafd80433ae1-attachment.attach"}, {"name": "响应头", "source": "5f293c12-a185-4691-996f-280d8d7d39ce-attachment.attach"}, {"name": "响应文本内容", "source": "cd843dd8-d3d1-4a84-b27c-9e9b994f02b7-attachment.attach"}], "start": 1610078870686, "stop": 1610078870688}, {"name": "断言", "status": "failed", "statusDetails": {"message": "AssertionError\n", "trace": "  File \"D:\\PycharmProjects\\ApiAutoTestPytest\\util\\requestUtil.py\", line 60, in assertResult\n    assert result.status_code == int(statusCode)\n"}, "attachments": [{"name": "预期响应状态码", "source": "c55ec826-1d78-4ff9-aaa9-228be24bd01c-attachment.attach"}, {"name": "预期返回错误码", "source": "266cf4f9-233a-403a-bf7b-2775d0a3264c-attachment.attach"}, {"name": "预期返回错误信息", "source": "154ff351-f299-4fec-bbbf-2afe351c0c75-attachment.attach"}], "start": 1610078870688, "stop": 1610078870689}], "parameters": [{"name": "getData", "value": "{'name': 'erJi', 'method': 'GET', 'url': 'http://192.168.1.165:8081/shop/mfindByPageCsid', 'headers': None, 'params': {'csid': '1', 'page': ''}, 'data': None, 'json': None, 'validate': {'statusCode': '200', 'errorCode': '400', 'msg': 'page为必填'}}"}], "start": 1610078870670, "stop": 1610078870690, "uuid": "197a02fa-bb84-4970-862d-fdb98c1304a8", "historyId": "c6cf90ffed342839c500c67ba0d4404e", "testCaseId": "64a1b3a2a3d04e960280604741456f7b", "fullName": "testcases.test_erJi.TestErJi#test_erJi", "labels": [{"name": "story", "value": "二级分页接口"}, {"name": "feature", "value": "商品信息"}, {"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_erJi"}, {"name": "subSuite", "value": "TestErJi"}, {"name": "host", "value": "DESKTOP-HLLR26H"}, {"name": "thread", "value": "30388-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_erJi"}]}
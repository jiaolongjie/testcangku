{"name": "test_erJi[getData4]", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <test_erJi.TestErJi object at 0x0000018D316DE188>\ngetData = {'data': {'csid': 'a', 'page': 'y'}, 'headers': None, 'json': None, 'method': 'POST', ...}\n\n    @allure.story('二级分页接口')\n    def test_erJi(self,getData):\n        # 发送请求\n        result = ru.doRequest(method=getData['method'],url=getData['url'],params=getData['params'],data=getData['data'],json=getData['json'],headers=getData['headers'])\n    \n>       ru.assertResult(result,getData['validate']['statusCode'],getData['validate']['errorCode'],getData['validate']['msg'])\n\n..\\testcases\\test_erJi.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <util.requestUtil.RequestUtil object at 0x0000018D31587B48>\nresult = <Response [400]>, statusCode = '200', errorCode = '400', msg = '参数类型错误'\n\n    def assertResult(self, result, statusCode, errorCode, msg):\n        with allure.step('发送请求'):\n            allure.attach(str(result.request.url),'请求路径')\n            allure.attach(str(result.request.method),'请求方式')\n            allure.attach(str(result.request.headers),'请求头')\n            allure.attach(str(result.request.body),'请求体')\n    \n        with allure.step('获取响应'):\n            allure.attach(str(result.status_code),'响应状态码')\n            allure.attach(str(result.headers),'响应头')\n            allure.attach(str(result.text),'响应文本内容')\n    \n        with allure.step('断言'):\n            allure.attach(str(statusCode),'预期响应状态码')\n            allure.attach(str(errorCode),'预期返回错误码')\n            allure.attach(str(msg),'预期返回错误信息')\n    \n>           assert result.status_code == int(statusCode)\nE           AssertionError\n\n..\\util\\requestUtil.py:60: AssertionError"}, "steps": [{"name": "发送请求", "status": "passed", "attachments": [{"name": "请求路径", "source": "2ed25c4b-1b1a-4e23-96b7-4f159f216f5c-attachment.attach"}, {"name": "请求方式", "source": "8b3723b8-0f16-4020-8cd2-1bc3571fa4e9-attachment.attach"}, {"name": "请求头", "source": "c8887359-e942-4139-8423-454827fbc46b-attachment.attach"}, {"name": "请求体", "source": "747c302e-7f72-4ec9-8581-7a2dff660341-attachment.attach"}], "start": 1610270380138, "stop": 1610270380140}, {"name": "获取响应", "status": "passed", "attachments": [{"name": "响应状态码", "source": "65c9349c-78e6-4739-9297-6c7ac6ec06cd-attachment.attach"}, {"name": "响应头", "source": "ab36fd4f-8482-4d23-8c89-7ce3474c5388-attachment.attach"}, {"name": "响应文本内容", "source": "fec1590b-8ba1-4263-adb0-984d2c899e1b-attachment.attach"}], "start": 1610270380140, "stop": 1610270380142}, {"name": "断言", "status": "failed", "statusDetails": {"message": "AssertionError\n", "trace": "  File \"D:\\PycharmProjects\\ApiAutoTestPytest\\util\\requestUtil.py\", line 60, in assertResult\n    assert result.status_code == int(statusCode)\n"}, "attachments": [{"name": "预期响应状态码", "source": "7dda6c5f-9717-4a9b-be0c-0594a307aa55-attachment.attach"}, {"name": "预期返回错误码", "source": "3ff9013b-013c-4308-a584-9610953e1651-attachment.attach"}, {"name": "预期返回错误信息", "source": "a054d817-1609-4979-9034-6f10660744b9-attachment.attach"}], "start": 1610270380142, "stop": 1610270380145}], "parameters": [{"name": "getData", "value": "{'name': 'erJi', 'method': 'POST', 'url': 'http://192.168.1.165:8081/shop/mfindByPageCsid', 'headers': None, 'params': None, 'data': {'csid': 'a', 'page': 'y'}, 'json': None, 'validate': {'statusCode': '200', 'errorCode': '400', 'msg': '参数类型错误'}}"}], "start": 1610270380132, "stop": 1610270380146, "uuid": "e4dee705-899b-4755-996c-c9987413f6da", "historyId": "5be90402c160aeaca01c71c14980a6f3", "testCaseId": "64a1b3a2a3d04e960280604741456f7b", "fullName": "testcases.test_erJi.TestErJi#test_erJi", "labels": [{"name": "feature", "value": "商品信息"}, {"name": "story", "value": "二级分页接口"}, {"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_erJi"}, {"name": "subSuite", "value": "TestErJi"}, {"name": "host", "value": "DESKTOP-HLLR26H"}, {"name": "thread", "value": "31024-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_erJi"}]}
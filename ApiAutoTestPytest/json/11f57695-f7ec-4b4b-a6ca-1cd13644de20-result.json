{"name": "test_erJi[getData3]", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <test_erJi.TestErJi object at 0x000002B063B43A48>\ngetData = {'data': {'csid': '1', 'page': ''}, 'headers': None, 'json': None, 'method': 'POST', ...}\n\n    @allure.story('二级分页接口')\n    def test_erJi(self,getData):\n        # 发送请求\n        result = ru.doRequest(method=getData['method'],url=getData['url'],params=getData['params'],data=getData['data'],json=getData['json'],headers=getData['headers'])\n    \n>       ru.assertResult(result,getData['validate']['statusCode'],getData['validate']['errorCode'],getData['validate']['msg'])\n\n..\\testcases\\test_erJi.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <util.requestUtil.RequestUtil object at 0x000002B062EF5208>\nresult = <Response [400]>, statusCode = '200', errorCode = '400'\nmsg = 'page为必填'\n\n    def assertResult(self, result, statusCode, errorCode, msg):\n        with allure.step('发送请求'):\n            allure.attach(str(result.request.url),'请求路径')\n            allure.attach(str(result.request.method),'请求方式')\n            allure.attach(str(result.request.headers),'请求头')\n            allure.attach(str(result.request.body),'请求体')\n    \n        with allure.step('获取响应'):\n            allure.attach(str(result.status_code),'响应状态码')\n            allure.attach(str(result.headers),'响应头')\n            allure.attach(str(result.text),'响应文本内容')\n    \n        with allure.step('断言'):\n            allure.attach(str(statusCode),'预期响应状态码')\n            allure.attach(str(errorCode),'预期返回错误码')\n            allure.attach(str(msg),'预期返回错误信息')\n    \n>           assert result.status_code == int(statusCode)\nE           AssertionError\n\n..\\util\\requestUtil.py:60: AssertionError"}, "steps": [{"name": "发送请求", "status": "passed", "attachments": [{"name": "请求路径", "source": "ecdf7754-d3aa-454d-acfc-849ea902a80f-attachment.attach"}, {"name": "请求方式", "source": "6e9434c1-6396-40c0-b9ba-bcf0d9247884-attachment.attach"}, {"name": "请求头", "source": "baa4c20e-a666-445a-859b-ac40a3a0a8ba-attachment.attach"}, {"name": "请求体", "source": "9c86608b-658c-4dbb-988c-940ff38b0618-attachment.attach"}], "start": 1610077695490, "stop": 1610077695494}, {"name": "获取响应", "status": "passed", "attachments": [{"name": "响应状态码", "source": "5326ce28-fb09-48be-9daa-a058de4df259-attachment.attach"}, {"name": "响应头", "source": "01853a36-fae1-426d-bebb-43337c5abe1e-attachment.attach"}, {"name": "响应文本内容", "source": "8bba95f9-72f6-4212-afcf-e856814eefb9-attachment.attach"}], "start": 1610077695494, "stop": 1610077695495}, {"name": "断言", "status": "failed", "statusDetails": {"message": "AssertionError\n", "trace": "  File \"D:\\PycharmProjects\\ApiAutoTestPytest\\util\\requestUtil.py\", line 60, in assertResult\n    assert result.status_code == int(statusCode)\n"}, "attachments": [{"name": "预期响应状态码", "source": "ae34a4bb-99f6-4ef5-97fd-c1aea44b0ce6-attachment.attach"}, {"name": "预期返回错误码", "source": "8822142a-d179-446a-99e8-c6a5dff1e847-attachment.attach"}, {"name": "预期返回错误信息", "source": "8d196b96-3f51-4f45-af2c-6ef8be59cbc8-attachment.attach"}], "start": 1610077695495, "stop": 1610077695496}], "parameters": [{"name": "getData", "value": "{'name': 'erJi', 'method': 'POST', 'url': 'http://192.168.1.165:8081/shop/mfindByPageCsid', 'headers': None, 'params': None, 'data': {'csid': '1', 'page': ''}, 'json': None, 'validate': {'statusCode': '200', 'errorCode': '400', 'msg': 'page为必填'}}"}], "start": 1610077695448, "stop": 1610077695497, "uuid": "7bd6d4f6-943c-4d43-ad99-45758353cdf7", "historyId": "c6cf90ffed342839c500c67ba0d4404e", "testCaseId": "64a1b3a2a3d04e960280604741456f7b", "fullName": "testcases.test_erJi.TestErJi#test_erJi", "labels": [{"name": "story", "value": "二级分页接口"}, {"name": "feature", "value": "商品信息"}, {"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_erJi"}, {"name": "subSuite", "value": "TestErJi"}, {"name": "host", "value": "DESKTOP-HLLR26H"}, {"name": "thread", "value": "28724-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_erJi"}]}
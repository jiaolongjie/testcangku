{
  "uid" : "44d543f65b6f5c96",
  "name" : "test_login[getData3]",
  "fullName" : "testcases.test_login.TestLogin#test_login",
  "historyId" : "86caba06811d746cf89ece1410ed87c2",
  "time" : {
    "start" : 1610270380261,
    "stop" : 1610270380337,
    "duration" : 76
  },
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <test_login.TestLogin object at 0x0000018D316AF708>\ngetData = {'data': {'password': '123', 'username': 'fealgfuajisao'}, 'headers': None, 'json': None, 'method': 'POST', ...}\n\n    @allure.story('登录接口')\n    def test_login(self,getData):\n        # 发送请求\n        result = ru.doRequest(method=getData['method'], url=getData['url'], params=getData['params'],data=getData['data'], json=getData['json'], headers=getData['headers'])\n    \n>       ru.assertResult(result, getData['validate']['statusCode'], getData['validate']['errorCode'],getData['validate']['msg'])\n\n..\\testcases\\test_login.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <util.requestUtil.RequestUtil object at 0x0000018D315C2408>\nresult = <Response [200]>, statusCode = '200', errorCode = '400', msg = '用户名不存在'\n\n    def assertResult(self, result, statusCode, errorCode, msg):\n        with allure.step('发送请求'):\n            allure.attach(str(result.request.url),'请求路径')\n            allure.attach(str(result.request.method),'请求方式')\n            allure.attach(str(result.request.headers),'请求头')\n            allure.attach(str(result.request.body),'请求体')\n    \n        with allure.step('获取响应'):\n            allure.attach(str(result.status_code),'响应状态码')\n            allure.attach(str(result.headers),'响应头')\n            allure.attach(str(result.text),'响应文本内容')\n    \n        with allure.step('断言'):\n            allure.attach(str(statusCode),'预期响应状态码')\n            allure.attach(str(errorCode),'预期返回错误码')\n            allure.attach(str(msg),'预期返回错误信息')\n    \n            assert result.status_code == int(statusCode)\n            assert result.json()['status'] == int(errorCode)\n>           assert result.json()['msg'] == msg\nE           AssertionError\n\n..\\util\\requestUtil.py:62: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "getData",
    "time" : {
      "start" : 1610270380261,
      "stop" : 1610270380261,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <test_login.TestLogin object at 0x0000018D316AF708>\ngetData = {'data': {'password': '123', 'username': 'fealgfuajisao'}, 'headers': None, 'json': None, 'method': 'POST', ...}\n\n    @allure.story('登录接口')\n    def test_login(self,getData):\n        # 发送请求\n        result = ru.doRequest(method=getData['method'], url=getData['url'], params=getData['params'],data=getData['data'], json=getData['json'], headers=getData['headers'])\n    \n>       ru.assertResult(result, getData['validate']['statusCode'], getData['validate']['errorCode'],getData['validate']['msg'])\n\n..\\testcases\\test_login.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <util.requestUtil.RequestUtil object at 0x0000018D315C2408>\nresult = <Response [200]>, statusCode = '200', errorCode = '400', msg = '用户名不存在'\n\n    def assertResult(self, result, statusCode, errorCode, msg):\n        with allure.step('发送请求'):\n            allure.attach(str(result.request.url),'请求路径')\n            allure.attach(str(result.request.method),'请求方式')\n            allure.attach(str(result.request.headers),'请求头')\n            allure.attach(str(result.request.body),'请求体')\n    \n        with allure.step('获取响应'):\n            allure.attach(str(result.status_code),'响应状态码')\n            allure.attach(str(result.headers),'响应头')\n            allure.attach(str(result.text),'响应文本内容')\n    \n        with allure.step('断言'):\n            allure.attach(str(statusCode),'预期响应状态码')\n            allure.attach(str(errorCode),'预期返回错误码')\n            allure.attach(str(msg),'预期返回错误信息')\n    \n            assert result.status_code == int(statusCode)\n            assert result.json()['status'] == int(errorCode)\n>           assert result.json()['msg'] == msg\nE           AssertionError\n\n..\\util\\requestUtil.py:62: AssertionError",
    "steps" : [ {
      "name" : "发送请求",
      "time" : {
        "start" : 1610270380272,
        "stop" : 1610270380332,
        "duration" : 60
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "bfb0f5669a2b44d9",
        "name" : "请求路径",
        "source" : "bfb0f5669a2b44d9.attach",
        "type" : "text/plain",
        "size" : 37
      }, {
        "uid" : "e38f68a6b22b98d3",
        "name" : "请求方式",
        "source" : "e38f68a6b22b98d3.attach",
        "type" : "text/plain",
        "size" : 4
      }, {
        "uid" : "690946b76746f990",
        "name" : "请求头",
        "source" : "690946b76746f990.attach",
        "type" : "text/plain",
        "size" : 198
      }, {
        "uid" : "65be85a83afdc891",
        "name" : "请求体",
        "source" : "65be85a83afdc891.attach",
        "type" : "text/plain",
        "size" : 35
      } ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 4
    }, {
      "name" : "获取响应",
      "time" : {
        "start" : 1610270380332,
        "stop" : 1610270380335,
        "duration" : 3
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "41456cba182787ed",
        "name" : "响应状态码",
        "source" : "41456cba182787ed.attach",
        "type" : "text/plain",
        "size" : 3
      }, {
        "uid" : "5ed8edc416c4fdc4",
        "name" : "响应头",
        "source" : "5ed8edc416c4fdc4.attach",
        "type" : "text/plain",
        "size" : 262
      }, {
        "uid" : "95979c32402702c8",
        "name" : "响应文本内容",
        "source" : "95979c32402702c8.attach",
        "type" : "text/plain",
        "size" : 77
      } ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 3
    }, {
      "name" : "断言",
      "time" : {
        "start" : 1610270380335,
        "stop" : 1610270380337,
        "duration" : 2
      },
      "status" : "failed",
      "statusMessage" : "AssertionError\n",
      "statusTrace" : "  File \"D:\\PycharmProjects\\ApiAutoTestPytest\\util\\requestUtil.py\", line 62, in assertResult\n    assert result.json()['msg'] == msg\n",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "e4693a5a555c641",
        "name" : "预期响应状态码",
        "source" : "e4693a5a555c641.attach",
        "type" : "text/plain",
        "size" : 3
      }, {
        "uid" : "3860b2af2c56a79e",
        "name" : "预期返回错误码",
        "source" : "3860b2af2c56a79e.attach",
        "type" : "text/plain",
        "size" : 3
      }, {
        "uid" : "5815788d230c7b14",
        "name" : "预期返回错误信息",
        "source" : "5815788d230c7b14.attach",
        "type" : "text/plain",
        "size" : 18
      } ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 3
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 3,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 10
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "登录接口"
  }, {
    "name" : "feature",
    "value" : "用户"
  }, {
    "name" : "parentSuite",
    "value" : "testcases"
  }, {
    "name" : "suite",
    "value" : "test_login"
  }, {
    "name" : "subSuite",
    "value" : "TestLogin"
  }, {
    "name" : "host",
    "value" : "DESKTOP-HLLR26H"
  }, {
    "name" : "thread",
    "value" : "31024-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcases.test_login"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "getData",
    "value" : "{'name': 'login', 'method': 'POST', 'url': 'http://192.168.1.165:8081/shop/mlogin', 'headers': None, 'params': None, 'data': {'username': 'fealgfuajisao', 'password': '123'}, 'json': None, 'validate': {'statusCode': '200', 'errorCode': '400', 'msg': '用户名不存在'}}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "21c6eead8da1e438",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1610270300991,
        "stop" : 1610270301011,
        "duration" : 20
      }
    }, {
      "uid" : "3c8fe270c378f8ad",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1610270197735,
        "stop" : 1610270197766,
        "duration" : 31
      }
    }, {
      "uid" : "54450241edc068df",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1610087535970,
        "stop" : 1610087536000,
        "duration" : 30
      }
    }, {
      "uid" : "be395b1829917ac7",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1610079105348,
        "stop" : 1610079105373,
        "duration" : 25
      }
    }, {
      "uid" : "a0055bcd6d2c672a",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1610078870843,
        "stop" : 1610078870863,
        "duration" : 20
      }
    }, {
      "uid" : "1a48f6fad44a40c3",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1610078544032,
        "stop" : 1610078544074,
        "duration" : 42
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "44d543f65b6f5c96.json",
  "parameterValues" : [ "{'name': 'login', 'method': 'POST', 'url': 'http://192.168.1.165:8081/shop/mlogin', 'headers': None, 'params': None, 'data': {'username': 'fealgfuajisao', 'password': '123'}, 'json': None, 'validate': {'statusCode': '200', 'errorCode': '400', 'msg': '用户名不存在'}}" ]
}
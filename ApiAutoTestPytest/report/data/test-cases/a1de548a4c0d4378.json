{
  "uid" : "a1de548a4c0d4378",
  "name" : "test_changjing_02",
  "fullName" : "testcases.test_changjing.TestChangJing#test_changjing_02",
  "historyId" : "46532ac8e89544b76a25c2f1842b03ab",
  "time" : {
    "start" : 1610270379818,
    "stop" : 1610270379890,
    "duration" : 72
  },
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <test_changjing.TestChangJing object at 0x0000018D315994C8>\n\n    @allure.story('场景测试02')\n    def test_changjing_02(self):\n        ru = RequestUtil()\n        cjru = ChangJingRequestUtil('changjing_02', ru)\n>       cjru.yamlAndRequest()\n\n..\\testcases\\test_changjing.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\util\\changJingRequestUtil.py:66: in yamlAndRequest\n    self.requestUtil.assertResult(result, dict['validate']['statusCode'], dict['validate']['errorCode'],dict['validate']['msg'])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <util.requestUtil.RequestUtil object at 0x0000018D315CE788>\nresult = <Response [200]>, statusCode = 200, errorCode = 400, msg = '用户名已存在'\n\n    def assertResult(self, result, statusCode, errorCode, msg):\n        with allure.step('发送请求'):\n            allure.attach(str(result.request.url),'请求路径')\n            allure.attach(str(result.request.method),'请求方式')\n            allure.attach(str(result.request.headers),'请求头')\n            allure.attach(str(result.request.body),'请求体')\n    \n        with allure.step('获取响应'):\n            allure.attach(str(result.status_code),'响应状态码')\n            allure.attach(str(result.headers),'响应头')\n            allure.attach(str(result.text),'响应文本内容')\n    \n        with allure.step('断言'):\n            allure.attach(str(statusCode),'预期响应状态码')\n            allure.attach(str(errorCode),'预期返回错误码')\n            allure.attach(str(msg),'预期返回错误信息')\n    \n            assert result.status_code == int(statusCode)\n>           assert result.json()['status'] == int(errorCode)\nE           AssertionError\n\n..\\util\\requestUtil.py:61: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <test_changjing.TestChangJing object at 0x0000018D315994C8>\n\n    @allure.story('场景测试02')\n    def test_changjing_02(self):\n        ru = RequestUtil()\n        cjru = ChangJingRequestUtil('changjing_02', ru)\n>       cjru.yamlAndRequest()\n\n..\\testcases\\test_changjing.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\util\\changJingRequestUtil.py:66: in yamlAndRequest\n    self.requestUtil.assertResult(result, dict['validate']['statusCode'], dict['validate']['errorCode'],dict['validate']['msg'])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <util.requestUtil.RequestUtil object at 0x0000018D315CE788>\nresult = <Response [200]>, statusCode = 200, errorCode = 400, msg = '用户名已存在'\n\n    def assertResult(self, result, statusCode, errorCode, msg):\n        with allure.step('发送请求'):\n            allure.attach(str(result.request.url),'请求路径')\n            allure.attach(str(result.request.method),'请求方式')\n            allure.attach(str(result.request.headers),'请求头')\n            allure.attach(str(result.request.body),'请求体')\n    \n        with allure.step('获取响应'):\n            allure.attach(str(result.status_code),'响应状态码')\n            allure.attach(str(result.headers),'响应头')\n            allure.attach(str(result.text),'响应文本内容')\n    \n        with allure.step('断言'):\n            allure.attach(str(statusCode),'预期响应状态码')\n            allure.attach(str(errorCode),'预期返回错误码')\n            allure.attach(str(msg),'预期返回错误信息')\n    \n            assert result.status_code == int(statusCode)\n>           assert result.json()['status'] == int(errorCode)\nE           AssertionError\n\n..\\util\\requestUtil.py:61: AssertionError",
    "steps" : [ {
      "name" : "发送请求:mcheckImg",
      "time" : {
        "start" : 1610270379825,
        "stop" : 1610270379863,
        "duration" : 38
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "发送请求",
        "time" : {
          "start" : 1610270379837,
          "stop" : 1610270379839,
          "duration" : 2
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "cff9e0d982279f58",
          "name" : "请求路径",
          "source" : "cff9e0d982279f58.attach",
          "type" : "text/plain",
          "size" : 40
        }, {
          "uid" : "a87cee05afac5e38",
          "name" : "请求方式",
          "source" : "a87cee05afac5e38.attach",
          "type" : "text/plain",
          "size" : 3
        }, {
          "uid" : "44a41371a34df640",
          "name" : "请求头",
          "source" : "44a41371a34df640.attach",
          "type" : "text/plain",
          "size" : 121
        }, {
          "uid" : "30d9cc7a02b58d71",
          "name" : "请求体",
          "source" : "30d9cc7a02b58d71.attach",
          "type" : "text/plain",
          "size" : 4
        } ],
        "parameters" : [ ],
        "hasContent" : true,
        "stepsCount" : 0,
        "shouldDisplayMessage" : false,
        "attachmentsCount" : 4
      }, {
        "name" : "获取响应",
        "time" : {
          "start" : 1610270379839,
          "stop" : 1610270379841,
          "duration" : 2
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "dac96707ba25e44b",
          "name" : "响应状态码",
          "source" : "dac96707ba25e44b.attach",
          "type" : "text/plain",
          "size" : 3
        }, {
          "uid" : "45279822dc3afb29",
          "name" : "响应头",
          "source" : "45279822dc3afb29.attach",
          "type" : "text/plain",
          "size" : 262
        }, {
          "uid" : "38f165214c605db1",
          "name" : "响应文本内容",
          "source" : "38f165214c605db1.attach",
          "type" : "text/plain",
          "size" : 53
        } ],
        "parameters" : [ ],
        "hasContent" : true,
        "stepsCount" : 0,
        "shouldDisplayMessage" : false,
        "attachmentsCount" : 3
      }, {
        "name" : "断言",
        "time" : {
          "start" : 1610270379841,
          "stop" : 1610270379843,
          "duration" : 2
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "b5c264c19098f5f6",
          "name" : "预期响应状态码",
          "source" : "b5c264c19098f5f6.attach",
          "type" : "text/plain",
          "size" : 3
        }, {
          "uid" : "a56f8b1da4f44fff",
          "name" : "预期返回错误码",
          "source" : "a56f8b1da4f44fff.attach",
          "type" : "text/plain",
          "size" : 3
        }, {
          "uid" : "93ec56e9ef8b580b",
          "name" : "预期返回错误信息",
          "source" : "93ec56e9ef8b580b.attach",
          "type" : "text/plain",
          "size" : 7
        } ],
        "parameters" : [ ],
        "hasContent" : true,
        "stepsCount" : 0,
        "shouldDisplayMessage" : false,
        "attachmentsCount" : 3
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 3,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 10
    }, {
      "name" : "发送请求:mregist",
      "time" : {
        "start" : 1610270379863,
        "stop" : 1610270379890,
        "duration" : 27
      },
      "status" : "failed",
      "statusMessage" : "AssertionError\n",
      "statusTrace" : "  File \"D:\\PycharmProjects\\ApiAutoTestPytest\\util\\changJingRequestUtil.py\", line 66, in yamlAndRequest\n    self.requestUtil.assertResult(result, dict['validate']['statusCode'], dict['validate']['errorCode'],dict['validate']['msg'])\n  File \"D:\\PycharmProjects\\ApiAutoTestPytest\\util\\requestUtil.py\", line 61, in assertResult\n    assert result.json()['status'] == int(errorCode)\n",
      "steps" : [ {
        "name" : "发送请求",
        "time" : {
          "start" : 1610270379883,
          "stop" : 1610270379885,
          "duration" : 2
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "547ae4a4783b065a",
          "name" : "请求路径",
          "source" : "547ae4a4783b065a.attach",
          "type" : "text/plain",
          "size" : 38
        }, {
          "uid" : "378149e2110a75bc",
          "name" : "请求方式",
          "source" : "378149e2110a75bc.attach",
          "type" : "text/plain",
          "size" : 4
        }, {
          "uid" : "30002f8371135073",
          "name" : "请求头",
          "source" : "30002f8371135073.attach",
          "type" : "text/plain",
          "size" : 277
        }, {
          "uid" : "e4e62daf544fcfa2",
          "name" : "请求体",
          "source" : "e4e62daf544fcfa2.attach",
          "type" : "text/plain",
          "size" : 71
        } ],
        "parameters" : [ ],
        "hasContent" : true,
        "stepsCount" : 0,
        "shouldDisplayMessage" : false,
        "attachmentsCount" : 4
      }, {
        "name" : "获取响应",
        "time" : {
          "start" : 1610270379885,
          "stop" : 1610270379886,
          "duration" : 1
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "2293b40d831830d0",
          "name" : "响应状态码",
          "source" : "2293b40d831830d0.attach",
          "type" : "text/plain",
          "size" : 3
        }, {
          "uid" : "fd5dc841564e47c5",
          "name" : "响应头",
          "source" : "fd5dc841564e47c5.attach",
          "type" : "text/plain",
          "size" : 179
        }, {
          "uid" : "993cd977c5cbb34d",
          "name" : "响应文本内容",
          "source" : "993cd977c5cbb34d.attach",
          "type" : "text/plain",
          "size" : 59
        } ],
        "parameters" : [ ],
        "hasContent" : true,
        "stepsCount" : 0,
        "shouldDisplayMessage" : false,
        "attachmentsCount" : 3
      }, {
        "name" : "断言",
        "time" : {
          "start" : 1610270379886,
          "stop" : 1610270379889,
          "duration" : 3
        },
        "status" : "failed",
        "statusMessage" : "AssertionError\n",
        "statusTrace" : "  File \"D:\\PycharmProjects\\ApiAutoTestPytest\\util\\requestUtil.py\", line 61, in assertResult\n    assert result.json()['status'] == int(errorCode)\n",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "eae3738da1e3a7a3",
          "name" : "预期响应状态码",
          "source" : "eae3738da1e3a7a3.attach",
          "type" : "text/plain",
          "size" : 3
        }, {
          "uid" : "165d2f5739bcfe6f",
          "name" : "预期返回错误码",
          "source" : "165d2f5739bcfe6f.attach",
          "type" : "text/plain",
          "size" : 3
        }, {
          "uid" : "aa1c8cd6c107768b",
          "name" : "预期返回错误信息",
          "source" : "aa1c8cd6c107768b.attach",
          "type" : "text/plain",
          "size" : 18
        } ],
        "parameters" : [ ],
        "hasContent" : true,
        "stepsCount" : 0,
        "shouldDisplayMessage" : true,
        "attachmentsCount" : 3
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 3,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 10
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 8,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 20
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "场景测试02"
  }, {
    "name" : "feature",
    "value" : "场景"
  }, {
    "name" : "parentSuite",
    "value" : "testcases"
  }, {
    "name" : "suite",
    "value" : "test_changjing"
  }, {
    "name" : "subSuite",
    "value" : "TestChangJing"
  }, {
    "name" : "host",
    "value" : "DESKTOP-HLLR26H"
  }, {
    "name" : "thread",
    "value" : "31024-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcases.test_changjing"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "a1de548a4c0d4378.json",
  "parameterValues" : [ ]
}
{
  "uid" : "a4c4852a1b584059",
  "name" : "test_erJi[getData4]",
  "fullName" : "testcases.test_erJi.TestErJi#test_erJi",
  "historyId" : "5be90402c160aeaca01c71c14980a6f3",
  "time" : {
    "start" : 1610270380132,
    "stop" : 1610270380146,
    "duration" : 14
  },
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <test_erJi.TestErJi object at 0x0000018D316DE188>\ngetData = {'data': {'csid': 'a', 'page': 'y'}, 'headers': None, 'json': None, 'method': 'POST', ...}\n\n    @allure.story('二级分页接口')\n    def test_erJi(self,getData):\n        # 发送请求\n        result = ru.doRequest(method=getData['method'],url=getData['url'],params=getData['params'],data=getData['data'],json=getData['json'],headers=getData['headers'])\n    \n>       ru.assertResult(result,getData['validate']['statusCode'],getData['validate']['errorCode'],getData['validate']['msg'])\n\n..\\testcases\\test_erJi.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <util.requestUtil.RequestUtil object at 0x0000018D31587B48>\nresult = <Response [400]>, statusCode = '200', errorCode = '400', msg = '参数类型错误'\n\n    def assertResult(self, result, statusCode, errorCode, msg):\n        with allure.step('发送请求'):\n            allure.attach(str(result.request.url),'请求路径')\n            allure.attach(str(result.request.method),'请求方式')\n            allure.attach(str(result.request.headers),'请求头')\n            allure.attach(str(result.request.body),'请求体')\n    \n        with allure.step('获取响应'):\n            allure.attach(str(result.status_code),'响应状态码')\n            allure.attach(str(result.headers),'响应头')\n            allure.attach(str(result.text),'响应文本内容')\n    \n        with allure.step('断言'):\n            allure.attach(str(statusCode),'预期响应状态码')\n            allure.attach(str(errorCode),'预期返回错误码')\n            allure.attach(str(msg),'预期返回错误信息')\n    \n>           assert result.status_code == int(statusCode)\nE           AssertionError\n\n..\\util\\requestUtil.py:60: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "getData",
    "time" : {
      "start" : 1610270380131,
      "stop" : 1610270380131,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <test_erJi.TestErJi object at 0x0000018D316DE188>\ngetData = {'data': {'csid': 'a', 'page': 'y'}, 'headers': None, 'json': None, 'method': 'POST', ...}\n\n    @allure.story('二级分页接口')\n    def test_erJi(self,getData):\n        # 发送请求\n        result = ru.doRequest(method=getData['method'],url=getData['url'],params=getData['params'],data=getData['data'],json=getData['json'],headers=getData['headers'])\n    \n>       ru.assertResult(result,getData['validate']['statusCode'],getData['validate']['errorCode'],getData['validate']['msg'])\n\n..\\testcases\\test_erJi.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <util.requestUtil.RequestUtil object at 0x0000018D31587B48>\nresult = <Response [400]>, statusCode = '200', errorCode = '400', msg = '参数类型错误'\n\n    def assertResult(self, result, statusCode, errorCode, msg):\n        with allure.step('发送请求'):\n            allure.attach(str(result.request.url),'请求路径')\n            allure.attach(str(result.request.method),'请求方式')\n            allure.attach(str(result.request.headers),'请求头')\n            allure.attach(str(result.request.body),'请求体')\n    \n        with allure.step('获取响应'):\n            allure.attach(str(result.status_code),'响应状态码')\n            allure.attach(str(result.headers),'响应头')\n            allure.attach(str(result.text),'响应文本内容')\n    \n        with allure.step('断言'):\n            allure.attach(str(statusCode),'预期响应状态码')\n            allure.attach(str(errorCode),'预期返回错误码')\n            allure.attach(str(msg),'预期返回错误信息')\n    \n>           assert result.status_code == int(statusCode)\nE           AssertionError\n\n..\\util\\requestUtil.py:60: AssertionError",
    "steps" : [ {
      "name" : "发送请求",
      "time" : {
        "start" : 1610270380138,
        "stop" : 1610270380140,
        "duration" : 2
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "969c86ce32b5ed24",
        "name" : "请求路径",
        "source" : "969c86ce32b5ed24.attach",
        "type" : "text/plain",
        "size" : 46
      }, {
        "uid" : "a7ee86496f2f472",
        "name" : "请求方式",
        "source" : "a7ee86496f2f472.attach",
        "type" : "text/plain",
        "size" : 4
      }, {
        "uid" : "517860d0e5c3106e",
        "name" : "请求头",
        "source" : "517860d0e5c3106e.attach",
        "type" : "text/plain",
        "size" : 198
      }, {
        "uid" : "b462e8d28e46a68b",
        "name" : "请求体",
        "source" : "b462e8d28e46a68b.attach",
        "type" : "text/plain",
        "size" : 13
      } ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 4
    }, {
      "name" : "获取响应",
      "time" : {
        "start" : 1610270380140,
        "stop" : 1610270380142,
        "duration" : 2
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "4c50889195ad7e0c",
        "name" : "响应状态码",
        "source" : "4c50889195ad7e0c.attach",
        "type" : "text/plain",
        "size" : 3
      }, {
        "uid" : "6f339b2377999881",
        "name" : "响应头",
        "source" : "6f339b2377999881.attach",
        "type" : "text/plain",
        "size" : 161
      }, {
        "uid" : "54fe6d3060e75e00",
        "name" : "响应文本内容",
        "source" : "54fe6d3060e75e00.attach",
        "type" : "text/html",
        "size" : 737
      } ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 3
    }, {
      "name" : "断言",
      "time" : {
        "start" : 1610270380142,
        "stop" : 1610270380145,
        "duration" : 3
      },
      "status" : "failed",
      "statusMessage" : "AssertionError\n",
      "statusTrace" : "  File \"D:\\PycharmProjects\\ApiAutoTestPytest\\util\\requestUtil.py\", line 60, in assertResult\n    assert result.status_code == int(statusCode)\n",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "77d3a28401918b6c",
        "name" : "预期响应状态码",
        "source" : "77d3a28401918b6c.attach",
        "type" : "text/plain",
        "size" : 3
      }, {
        "uid" : "3c6325989150c1fa",
        "name" : "预期返回错误码",
        "source" : "3c6325989150c1fa.attach",
        "type" : "text/plain",
        "size" : 3
      }, {
        "uid" : "7fb66bf78f78446c",
        "name" : "预期返回错误信息",
        "source" : "7fb66bf78f78446c.attach",
        "type" : "text/plain",
        "size" : 18
      } ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 3
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 3,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 10
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "商品信息"
  }, {
    "name" : "story",
    "value" : "二级分页接口"
  }, {
    "name" : "parentSuite",
    "value" : "testcases"
  }, {
    "name" : "suite",
    "value" : "test_erJi"
  }, {
    "name" : "subSuite",
    "value" : "TestErJi"
  }, {
    "name" : "host",
    "value" : "DESKTOP-HLLR26H"
  }, {
    "name" : "thread",
    "value" : "31024-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcases.test_erJi"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "getData",
    "value" : "{'name': 'erJi', 'method': 'POST', 'url': 'http://192.168.1.165:8081/shop/mfindByPageCsid', 'headers': None, 'params': None, 'data': {'csid': 'a', 'page': 'y'}, 'json': None, 'validate': {'statusCode': '200', 'errorCode': '400', 'msg': '参数类型错误'}}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "a82ab7c5429cef1d",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1610270300841,
        "stop" : 1610270300858,
        "duration" : 17
      }
    }, {
      "uid" : "16ef96b7b5772164",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1610270197580,
        "stop" : 1610270197608,
        "duration" : 28
      }
    }, {
      "uid" : "5acbc03ae385614b",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1610087535776,
        "stop" : 1610087535807,
        "duration" : 31
      }
    }, {
      "uid" : "60a56795f8727176",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1610079105209,
        "stop" : 1610079105228,
        "duration" : 19
      }
    }, {
      "uid" : "2d73a164aaa199a1",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1610078870718,
        "stop" : 1610078870737,
        "duration" : 19
      }
    }, {
      "uid" : "3631b2093f6297e0",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1610078543519,
        "stop" : 1610078543542,
        "duration" : 23
      }
    }, {
      "uid" : "eab39e92ff5e2c1a",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1610077695530,
        "stop" : 1610077695548,
        "duration" : 18
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "a4c4852a1b584059.json",
  "parameterValues" : [ "{'name': 'erJi', 'method': 'POST', 'url': 'http://192.168.1.165:8081/shop/mfindByPageCsid', 'headers': None, 'params': None, 'data': {'csid': 'a', 'page': 'y'}, 'json': None, 'validate': {'statusCode': '200', 'errorCode': '400', 'msg': '参数类型错误'}}" ]
}